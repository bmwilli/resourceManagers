#!/usr/bin/python

#
#
from os.path import dirname, realpath, expanduser, sep
from os import system, getenv
import sys
import getopt;
from smtpd import Options
import subprocess
import commands

#true if this is part of Streams
is_prod_switch=False

streams_mesos_jar_basename="streams-on-mesos-0.0.1-SNAPSHOT-jar-with-dependencies.jar"

class Command(object):

	def __init__(self, name, descr, str):
		self._name = name
		self._descr = descr
		self._str = str


COMMANDS = {
	"start": Command("start", "Starts the Streams Mesos Framework (Scheduler). If the --deploy option is specified,\n\tStreams will first be installed on the node before starting the services.",
			 "\t[--zkconnect {<host>:<port>},...]\n"
			 + "\t[--master <Mesos Master URI>]\n"
			 + "\t[-d,--domain-id <did>]\n"
			 + "\t[--deploy]\n"
			 + "\t[--properties <optional: path to Streams Mesos Scheduler Properties>]"
			 ),
	"stop": Command("stop",  "Stops the Streams Mesos Framework.",
			"\t[--zkconnect {<host>:<port>},...]\n"
			+ "\t[-d,--domain-id <did>]\n"
			+ "\t[--force]"
			)
	}

def print_help(msg):
	print "Usage: streams-on-mesos command <options>"
	print "COMMAND\tOPTIONS"
	for command in COMMANDS:
		print command  + "  " + COMMANDS[command]._descr
		print COMMANDS[command]._str
	print ""
	sys.exit(msg)

def test_var(var, msg):
	if(var == None):
		print_help(msg)



instance_owner = getenv("USER")
streams_install_dir = getenv("STREAMS_INSTALL")
#yarn_home=getenv("YARN_HOME")
user_home=getenv("HOME")
domain_env=getenv("STREAMS_DOMAIN_ID")
zk_env=getenv("STREAMS_ZKCONNECT")


test_var(streams_install_dir, "ERROR: STREAMS_INSTALL environment variable not set")
#test_var(yarn_home, "ERROR: YARN_HOME environment variable not set")


streams_mesos_jar = None
am_prop_file = None

if (is_prod_switch):
	streams_mesos_jar=streams_install_dir+"/lib/"+streams_mesos_jar_basename
	am_prop_file=streams_install_dir+"/etc/mesos/streams-mesos.properties"
else:
	proj_path=(dirname(realpath(__file__))) + "/../"
	streams_mesos_jar=proj_path + "target/" + streams_mesos_jar_basename
	am_prop_file=proj_path+"/etc/streams-mesos.properties"


if len(sys.argv) < 2:
	print_help(0)


options, remainder = getopt.getopt(sys.argv[2:], "d:", ["master=", "zkconnect=", "domain-id=", "domain=", "properties=", "deploy", "force"])

zk=None
master=None
domain=None
deploy=False
domain=domain_env
zk=zk_env
wasDomainSet=False
wasZkSet=False
force=False
wasPropSet=False
wasMasterSet=False

for opt, arg in options:
	if opt == "--zkconnect":
		zk = arg
		wasZkSet=True
	elif opt == "--master":
		master = arg
		wasMasterSet=True
	elif opt in ("--domain" , "-d" ,"--domain-id"):
		domain = arg
		wasDomainSet=True
	elif opt == "--deploy":
		deploy=True
	elif opt == "--force":
		force=True
	elif opt == "--properties":
		am_prop_file=arg
		wasPropSet=True
	else:
		sys.exit("Invalid option: " + opt)


java_command = "$JAVA_HOME/bin/java -cp"

streams_product_cp = ":".join([
					streams_install_dir + "/lib/com.ibm.streams.resourcemgr.jar",
				  	streams_install_dir + "/lib/com.ibm.streams.resourcemgr.utils.jar",
				  	streams_install_dir + "/system/impl/lib/com.ibm.streams.platform.jar"
		       		])

base_cp = (streams_mesos_jar + ":"
	+ streams_install_dir + "/lib/" + streams_product_cp)

hadoop_cp = getenv("HADOOP_CLASSPATH")

test_var(zk, "ERROR: Zookeeper url not specified")
test_var(domain, "ERROR: Domain name not specified")

if (hadoop_cp == None):
	print "WARNING: HADOOP_CLASSPATH not set, will get errors if you configure hdfs provisioning directory"

if(sys.argv[1] == "start"):
	streams_mesos_framework_class = "com.ibm.streams.resourcemgr.mesos.StreamsMesosResourceManager"
	print "streams_install_dir = ", streams_install_dir

	command=(java_command
		 + " " + base_cp)
	if (hadoop_cp != None):
		 	command=(command + ":" + hadoop_cp)
	command=(command
		 + " com.ibm.streams.resourcemgr.ResourceServer"
		 + " --type mesos"
		 + " --manager " + streams_mesos_framework_class + " "
		 + " ".join(sys.argv[1:])
		 + " --home-dir " + user_home
		 + " --install-path " + streams_install_dir
		 )
	if not wasDomainSet:
		command = command+ " --domain-id " + domain
	if not wasZkSet:
		command = command+ " --zkconnect " + zk
	if not wasPropSet:
		command = command+ " --properties " + am_prop_file
	if not wasMasterSet:
		command = command+ " --master " + master

	rc = system(command)
	if(rc != 0):
		sys.exit("Failed")

elif(sys.argv[1] == "stop"):
	command=( java_command
			+ " " + streams_product_cp
			+ " com.ibm.streams.resourcemgr.StopResourceServer "
			+ " ".join(sys.argv[1:])
			+ " --type mesos"
		)
	if not wasDomainSet:
		command = command+ " -d " + domain
	if not wasZkSet:
		command = command+ " --zkconnect " + zk

	rc = system(command)
	if(rc != 0):
		if(not force):
			sys.exit("Failed")
		else:
			print "Streams Mesos Scheduler shutdown failed. Proceeding to a forced stop."
	elif (not force):
		print "Streams Mesos Scheduler stopped."
		sys.exit(0)

	#yarn_app_cmd=yarn_home + "/bin/yarn application -list 2>/dev/null | grep \"Streams-AM\" | grep \"" + domain + "\""
	#cnt_cmd=yarn_app_cmd +  " |  wc -l"
	#cnt = commands.getoutput(cnt_cmd)
	#while (cnt != "0"):
		#command = (
			#yarn_app_cmd +
			#+" |  head -n 1 | awk '{print $1}' | xargs "
			#+ yarn_home + "/bin/yarn application -kill")
		#rc = system(command)
		#if(rc != 0):
			#sys.exit("Failed")
		#cnt = commands.getoutput(cnt_cmd)
# status
elif(sys.argv[1] == "status"):
	command = (java_command 
		+ " " + base_cp 
		+ " com.ibm.streams.resourcemgr.ResourceServer "
		+ " ".join(sys.argv[1:])
		+ " --status"
		+ " --type mesos"
		)
	if not wasZkSet:
		command = command + " --zkconnect " + zk 

	rc = system(command)
	if(rc != 0):
		sys.exit(1)
else:
	print_help("Unknown command: " + sys.argv[1])
